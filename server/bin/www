#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();
const jwt = require("jsonwebtoken");
const { User, Conversation } = require("../db/models");

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const db = require("../db");
const onlineUsers = require("../onlineUsers");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server);

// Run on every event to ensure that user is login with data store in the socket
io.use((socket, next) => {
  const token = socket.handshake.auth.sessionId;
  if (token) {
    jwt.verify(token, process.env.SESSION_SECRET, (err, decoded) => {
      if (err) {
        return next(new Error("Cannot verify provided token"));
      }
      User.findOne({
        where: { id: decoded.id },
      }).then((user) => {
        socket.user = user;
        return next();
      });
    });
  } else {
    return next(new Error("Unauthenticated"));
  }
});

io.on("connection", (socket) => {
  if (socket.user && !socket.rooms.has(socket.user.id)) {
    socket.join(socket.user.id);
  }
  if (!socket.user) {
    socket.disconnect();
    return;
  }

  socket.on("go-online", () => {
    if (socket.user) {
      if (!onlineUsers.includes(socket.user.id)) {
        onlineUsers.push(socket.user.id);
      }
      // send the user who just went online to everyone else who is already online
      socket.broadcast.emit("add-online-user", socket.user.id);
    }
  });

  socket.on("new-message", ({ message, recipientId }) => {
    console.log("Sending message", message, socket.user);
    if (socket.user) {
      socket.to(recipientId).emit("new-message", {
        message,
        sender: socket.user,
      });
    }
  });

  socket.on("open-conversation", async (conversationId) => {
    if (socket.user) {
      // Check if socket.user has access to the conversation
      const conversation = await Conversation.findByPk(conversationId);
      if (conversation.hasAccess(socket.user.id)) {
        // Find out who is the other user in the conversation, send socket event to the other user
        if (conversation.user1Id !== socket.user.id) {
          socket
            .to(conversation.user1Id)
            .emit("open-conversation", conversationId);
        } else {
          socket
            .to(conversation.user2Id)
            .emit("open-conversation", conversationId);
        }
      }
    }
  });

  socket.on("logout", (id) => {
    if (onlineUsers.includes(id)) {
      userIndex = onlineUsers.indexOf(id);
      onlineUsers.splice(userIndex, 1);
      socket.broadcast.emit("remove-offline-user", id);
    }
    socket.disconnect();
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
